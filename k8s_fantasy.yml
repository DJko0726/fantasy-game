# Node Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fantasy-backend
  labels:
    app: fantasy-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fantasy-service  
  template:
    metadata:
      labels:
        app: fantasy-service
    spec:
      containers:
      - name: fantasy-service
        image: fantasy/backend:latest
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        ports:
        - containerPort: 80
        volumeMounts:
        - name: backend
          mountPath: /app
    volumes:
    - name: backend
      nfs:
        server: 192.168.49.2
        path: /home/koko/project/fantasy-game

---
# Node Service 3000 -> pods 80
apiVersion: v1
kind: Service
metadata:
  name: fantasy-service
  labels:
    app: fantasy-service
spec:
  type: NodePort
  selector:
    app: fantasy-service #pods labels 
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
    nodePort: 30001 
---
# Postgres Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-db
  labels:
    app: postgres-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-db
  template:
    metadata:
      labels:
        app: postgres-db
    spec:
      containers:
      - name: postgres-db
        image: postgres:latest
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        - name: PGDATA
          value: /data/postgres
        volumeMounts:
          - name: postgres-data
            mountPath: /var/lib/docker/volumes/fantasy-game_postgres/_data
---
# Postgres Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  labels:
    app: postgres-db
spec:
  ports:
  - port: 5432
    protocol: TCP
  selector:
    app: postgres-db
